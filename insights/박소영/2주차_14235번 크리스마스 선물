
문제 요약..

산타가 아이들을 만나면서 가장 비싼 선물을 하나씩 주고 다닌다.
선물은 거점지에서 충전하며, 아이를 만나면 현재 가지고 있는 선물 중 가장 가치가 높은 것을 꺼내서 준다.
줄 선물이 없다면 -1을 출력한다.

/////////////////////////////////////////////////////////
산타는 아이를 만날 때마다 가장 비싼 선물을 꺼내야 해

가장 큰 값을 매번 빠르게 꺼내야 하니까

단순 리스트로는 매번 max() 돌려야 하니까 느림 → ❌

그래서 우리는 최대 힙(우선순위 큐) 자료구조를 써야 함 → ✅
//////////////////////////////////////////////////////////

이건 자료구조문제이다.

지선생 가라사대
"값들을 넣고, 그중에서 **특정 조건(가장 크거나, 가장 작거나, 가장 먼저 들어온 것 등)에 따라 꺼내야 하는가?"
→ 그렇다면, 그건 자료구조 문제야."





선물은 최소 힙에 음수로 저장해서 최대 힙처럼 사용.
0이 들어오면 → 아이를 만난 것이므로, 가장 큰 선물 꺼냄.
0이 아니면 → 거점지에서 선물 충전이므로, 선물들을 힙에 넣음.



그럼 바로 개념정리!


1. heapq (힙큐)
파이썬에서 자동 정렬되는 저장소를 만들 수 있는 도구

heapq는 숫자를 넣을 때 자동으로 정렬.
꺼낼 때는 가장 작은 값부터 꺼냄.

=========================================
Python

import heapq

heap = []
heapq.heappush(heap, 3)
heapq.heappush(heap, 1)
heapq.heappush(heap, 5)

print(heapq.heappop(heap))  # 결과: 1
===========================================



2. 최대 힙처럼 쓰기 (값 큰 걸 먼저 꺼내고 싶을 때)
heapq는 원래 작은 수부터 꺼냄

하지만 우리는 큰 값부터 꺼내야 하니까 -> 넣을 때 음수로 바꿔서 넣음.
음수로 넣고, 꺼낼 땐 다시 -붙여서 원래 숫자로 바꿔줌.

============================================
Python

heapq.heappush(heap, -5)  # 5를 -5로 넣음
heapq.heappush(heap, -2)

print(-heapq.heappop(heap))  # 결과: 5
============================================






3. 리스트 자르기 data[1:]
data[1:]은 리스트의 첫 번째 값을 제외한 나머지 전부


============================================
Python

data = [3, 10, 20, 30]
gifts = data[1:]  # 결과: [10, 20, 30]
============================================





4. if gift_heap: 과 else

========================================
Python
복사
편집
if gift_heap:
    # 리스트에 선물이 하나라도 있으면 실행
else:
    # 선물이 아무것도 없으면 실행
==========================================
리스트(set, dict도 마찬가지)는 비어있으면 False,
무언가 들어있으면 True로 작동함.





--------------------> Q. 내가 앞으로 지피티없이 혼자 이런 문제를 풀 때 자료구조인지 아닌지 알려면 어떻게 알 수 있을까?


✅ 자료구조 문제인지 판단하는 3단계 기준


1. “데이터를 넣었다가 꺼내는 상황인가?”
👉 뭔가를 계속 저장해놨다가 꺼내야 한다?
→ 거의 90%는 자료구조 문제

예:

선물을 모아놨다가 꺼내야 해

숫자들을 쌓거나 줄 세워서 처리해야 해

방문 순서, 우선순위, 정렬 등을 고려해야 해


2. “꺼내는 순서가 중요하게 언급되었는가?”
👉 “가장 큰 값”, “가장 먼저 들어온 값”, “최근 값”
이런 표현이 나오면 → 특정 자료구조(힙, 큐, 스택)를 써야 한다는 신호


표현	사용 가능한 자료구조
가장 큰 값	힙 (max-heap)
가장 작은 값	힙 (min-heap)
가장 먼저 들어온 값	큐 (queue)
가장 나중에 들어온 값	스택 (stack)


3. “데이터가 많다 + 빠르게 처리해야 한다”는 조건이 나오는가?
👉 "원소 개수 최대 10만개", "시간 제한 1초", "시간초과 발생"
이런 표현이 있다면 효율적인 자료구조 선택이 핵심




🎯 한 줄 요약
데이터를 저장하고 꺼내는 규칙이 핵심인 문제라면,
그건 자료구조 문제다.



