FIFO(First-In-First-Out), 먼저 들어온 게 먼저 나가는 구조라는 것만 기억..!


1. 명령의 개수 N을 입력받는다
2. 큐를 하나 만든다 (deque 사용)
3. N번 반복하면서 다음을 처리한다
4. 한 줄씩 명령어를 입력받는다
5. 명령이 "push X"이면 숫자 X를 큐의 뒤에 넣는다
6. 명령이 "pop"이면, 큐가 비어있지 않으면 앞에서 값을 꺼내 출력. 비어있으면 -1 출력
7. 명령이 "size"이면, 큐에 들어있는 원소의 개수를 출력
8. 명령이 "empty"이면, 큐가 비어있으면 1, 아니면 0 출력
9. 명령이 "front"이면, 큐가 비어있지 않으면 맨 앞 원소 출력. 비어있으면 -1 출력
10. 명령이 "back"이면, 큐가 비어있지 않으면 맨 뒤 원소 출력. 비어있으면 -1 출력



와.. 큐 나오셨다,,,,★

사실 큐가 뭔지 몰라서 또 지선생 소환.


🧠 사용된 개념 설명

✅ 큐란?

먼저 들어온 데이터가 먼저 나가는 구조 → FIFO (First-In-First-Out)

실제로 줄 서서 차례대로 처리되는 상황에 자주 쓰임

가장 앞(front)에서 꺼내고, 가장 뒤(back)로 넣는다

✅ 파이썬에서 큐는 어떻게 구현할까?

파이썬에서는 deque라는 도구를 써서 큐를 만든다

deque는 양쪽 끝에서 빠르게 넣고 뺄 수 있는 줄 서는 박스라고 생각하면 된다

우리는 뒤로 넣고 앞에서 꺼내는 방식으로 사용한다

주요 메서드:

append(x): 뒤에 추가 (push)

popleft(): 앞에서 꺼내기 (pop)

len(q): 현재 큐의 길이 (size)

q[0]: 맨 앞 원소 (front)

q[-1]: 맨 뒤 원소 (back)




★★★궁금한 점★★★ 

---------->Q. 왜 deque를 써야 해?
deque는 앞이나 뒤에서 빠르게 넣고 뺄 수 있어서 줄처럼 사용하는 데 적합하다
리스트는 앞에서 꺼내려면 시간이 오래 걸리지만, deque는 앞에서도 바로 꺼낼 수 있다 (빠르다)
deque는 양방향에서 빠르게 꺼낼 수 있어서 pop(0)과 같지만 O(1) 시간


---------->Q. 명령어가 문자열인데 어떻게 처리하지?
입력이 "push X" 형태일 수 있으니까 startswith("push")로 확인한 뒤 split


---------->Q. front와 back은 없는 경우엔 왜 -1을 출력하지?
문제에서 비어있을 때 예외처리해주라고 명시되어 있음


---------->Q. 큐는 어디에 써먹을 수 있을까?
BFS 알고리즘
시스템에서 작업 처리 순서 관리
실시간 대기열 (콜센터, 프린터 등)
