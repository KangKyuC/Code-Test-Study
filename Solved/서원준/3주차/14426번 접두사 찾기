#시간초과 케이스 (이를 바탕으로 시간복잡도 고려하여  [N*M --> 정렬 + 이진탐색 N log N + M log N ] 


N, M = map(int, input().split())

s_list = [input().strip() for _ in range(N)]
test = [input().strip() for _ in range(M)]

count = 0

for a in test:
    for s in s_list:
        if s.startswith(a):     # M개의 쿼리마다 N개의 문자열을 순회하면서 startswith를 사용하고 있어  O(N × M)의 시간복잡도 
            count += 1
            break

print(count)

///

import sys
input = sys.stdin.readline

def binary_search(s_list, word):
    left, right = 0, len(s_list)
    while left < right:
        mid = (left + right) // 2
        if s_list[mid] < word:
            left = mid + 1
        else:
            right = mid
    return left  # word 이상이 처음 나오는 위치

N, M = map(int, input().split())

s_list = sorted([input().strip() for _ in range(N)])
test = [input().strip() for _ in range(M)]

count = 0

for a in test:
    idx = binary_search(s_list, a)
    # idx부터 검사해서 word 시작인지 확인
    if idx < N and s_list[idx].startswith(a):
        count += 1

print(count)
